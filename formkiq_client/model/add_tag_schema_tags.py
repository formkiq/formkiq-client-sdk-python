# coding: utf-8

"""
    FormKiQ HTTP API

    Formkiq API: Document Management Platform API using JWT Authentication  # noqa: E501

    The version of the OpenAPI document: 1.12.0
    Contact: support@formkiq.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from formkiq_client import schemas  # noqa: F401


class AddTagSchemaTags(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class compositeKeys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagSchemaCompositeKey']:
                        return TagSchemaCompositeKey
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagSchemaCompositeKey'], typing.List['TagSchemaCompositeKey']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'compositeKeys':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagSchemaCompositeKey':
                    return super().__getitem__(i)
            
            
            class required(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagSchemaRequired']:
                        return TagSchemaRequired
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagSchemaRequired'], typing.List['TagSchemaRequired']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'required':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagSchemaRequired':
                    return super().__getitem__(i)
            
            
            class optional(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagSchemaOptional']:
                        return TagSchemaOptional
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagSchemaOptional'], typing.List['TagSchemaOptional']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'optional':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagSchemaOptional':
                    return super().__getitem__(i)
            allowAdditionalTags = schemas.BoolSchema
            __annotations__ = {
                "compositeKeys": compositeKeys,
                "required": required,
                "optional": optional,
                "allowAdditionalTags": allowAdditionalTags,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compositeKeys"]) -> MetaOapg.properties.compositeKeys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optional"]) -> MetaOapg.properties.optional: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowAdditionalTags"]) -> MetaOapg.properties.allowAdditionalTags: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["compositeKeys", "required", "optional", "allowAdditionalTags", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compositeKeys"]) -> typing.Union[MetaOapg.properties.compositeKeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optional"]) -> typing.Union[MetaOapg.properties.optional, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowAdditionalTags"]) -> typing.Union[MetaOapg.properties.allowAdditionalTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["compositeKeys", "required", "optional", "allowAdditionalTags", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        compositeKeys: typing.Union[MetaOapg.properties.compositeKeys, list, tuple, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, list, tuple, schemas.Unset] = schemas.unset,
        optional: typing.Union[MetaOapg.properties.optional, list, tuple, schemas.Unset] = schemas.unset,
        allowAdditionalTags: typing.Union[MetaOapg.properties.allowAdditionalTags, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddTagSchemaTags':
        return super().__new__(
            cls,
            *_args,
            compositeKeys=compositeKeys,
            required=required,
            optional=optional,
            allowAdditionalTags=allowAdditionalTags,
            _configuration=_configuration,
            **kwargs,
        )

from formkiq_client.model.tag_schema_composite_key import TagSchemaCompositeKey
from formkiq_client.model.tag_schema_optional import TagSchemaOptional
from formkiq_client.model.tag_schema_required import TagSchemaRequired
