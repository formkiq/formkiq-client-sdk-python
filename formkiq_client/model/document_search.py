# coding: utf-8

"""
    FormKiQ HTTP API

    Formkiq API: Document Management Platform API using JWT Authentication  # noqa: E501

    The version of the OpenAPI document: 1.12.0
    Contact: support@formkiq.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from formkiq_client import schemas  # noqa: F401


class DocumentSearch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Document tag search criteria
    """


    class MetaOapg:
        
        class properties:
            text = schemas.StrSchema
        
            @staticmethod
            def meta() -> typing.Type['DocumentSearchItemMeta']:
                return DocumentSearchItemMeta
        
            @staticmethod
            def tag() -> typing.Type['DocumentSearchItemTag']:
                return DocumentSearchItemTag
            
            
            class documentIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'documentIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "text": text,
                "meta": meta,
                "tag": tag,
                "documentIds": documentIds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'DocumentSearchItemMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> 'DocumentSearchItemTag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentIds"]) -> MetaOapg.properties.documentIds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "meta", "tag", "documentIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['DocumentSearchItemMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union['DocumentSearchItemTag', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentIds"]) -> typing.Union[MetaOapg.properties.documentIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "meta", "tag", "documentIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        meta: typing.Union['DocumentSearchItemMeta', schemas.Unset] = schemas.unset,
        tag: typing.Union['DocumentSearchItemTag', schemas.Unset] = schemas.unset,
        documentIds: typing.Union[MetaOapg.properties.documentIds, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DocumentSearch':
        return super().__new__(
            cls,
            *_args,
            text=text,
            meta=meta,
            tag=tag,
            documentIds=documentIds,
            _configuration=_configuration,
            **kwargs,
        )

from formkiq_client.model.document_search_item_meta import DocumentSearchItemMeta
from formkiq_client.model.document_search_item_tag import DocumentSearchItemTag
