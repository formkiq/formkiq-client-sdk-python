# coding: utf-8

"""
    FormKiQ HTTP API

    Formkiq API: Document Management Platform API using JWT Authentication  # noqa: E501

    The version of the OpenAPI document: 1.12.0
    Contact: support@formkiq.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from formkiq_client import schemas  # noqa: F401


class GetDocumentOcrResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            data = schemas.StrSchema
            ocrEngine = schemas.StrSchema
            ocrStatus = schemas.StrSchema
            contentType = schemas.StrSchema
            isBase64 = schemas.BoolSchema
            userId = schemas.StrSchema
            documentId = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "ocrEngine": ocrEngine,
                "ocrStatus": ocrStatus,
                "contentType": contentType,
                "isBase64": isBase64,
                "userId": userId,
                "documentId": documentId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ocrEngine"]) -> MetaOapg.properties.ocrEngine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ocrStatus"]) -> MetaOapg.properties.ocrStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentType"]) -> MetaOapg.properties.contentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBase64"]) -> MetaOapg.properties.isBase64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentId"]) -> MetaOapg.properties.documentId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "ocrEngine", "ocrStatus", "contentType", "isBase64", "userId", "documentId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ocrEngine"]) -> typing.Union[MetaOapg.properties.ocrEngine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ocrStatus"]) -> typing.Union[MetaOapg.properties.ocrStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentType"]) -> typing.Union[MetaOapg.properties.contentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBase64"]) -> typing.Union[MetaOapg.properties.isBase64, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentId"]) -> typing.Union[MetaOapg.properties.documentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "ocrEngine", "ocrStatus", "contentType", "isBase64", "userId", "documentId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, str, schemas.Unset] = schemas.unset,
        ocrEngine: typing.Union[MetaOapg.properties.ocrEngine, str, schemas.Unset] = schemas.unset,
        ocrStatus: typing.Union[MetaOapg.properties.ocrStatus, str, schemas.Unset] = schemas.unset,
        contentType: typing.Union[MetaOapg.properties.contentType, str, schemas.Unset] = schemas.unset,
        isBase64: typing.Union[MetaOapg.properties.isBase64, bool, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        documentId: typing.Union[MetaOapg.properties.documentId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetDocumentOcrResponse':
        return super().__new__(
            cls,
            *_args,
            data=data,
            ocrEngine=ocrEngine,
            ocrStatus=ocrStatus,
            contentType=contentType,
            isBase64=isBase64,
            userId=userId,
            documentId=documentId,
            _configuration=_configuration,
            **kwargs,
        )
