# coding: utf-8

"""
    FormKiQ HTTP API

    Formkiq API: Document Management Platform API using JWT Authentication  # noqa: E501

    The version of the OpenAPI document: 1.12.0
    Contact: support@formkiq.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from formkiq_client import schemas  # noqa: F401


class GetDocumentResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "documentId",
        }
        
        class properties:
            documentId = schemas.StrSchema
            siteId = schemas.StrSchema
            path = schemas.StrSchema
            insertedDate = schemas.StrSchema
            lastModifiedDate = schemas.StrSchema
            checksum = schemas.StrSchema
            contentType = schemas.StrSchema
            userId = schemas.StrSchema
            contentLength = schemas.IntSchema
            versionId = schemas.StrSchema
            
            
            class documents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ChildDocument']:
                        return ChildDocument
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ChildDocument'], typing.List['ChildDocument']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'documents':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ChildDocument':
                    return super().__getitem__(i)
            __annotations__ = {
                "documentId": documentId,
                "siteId": siteId,
                "path": path,
                "insertedDate": insertedDate,
                "lastModifiedDate": lastModifiedDate,
                "checksum": checksum,
                "contentType": contentType,
                "userId": userId,
                "contentLength": contentLength,
                "versionId": versionId,
                "documents": documents,
            }
    
    documentId: MetaOapg.properties.documentId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentId"]) -> MetaOapg.properties.documentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteId"]) -> MetaOapg.properties.siteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insertedDate"]) -> MetaOapg.properties.insertedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedDate"]) -> MetaOapg.properties.lastModifiedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checksum"]) -> MetaOapg.properties.checksum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentType"]) -> MetaOapg.properties.contentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentLength"]) -> MetaOapg.properties.contentLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documents"]) -> MetaOapg.properties.documents: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["documentId", "siteId", "path", "insertedDate", "lastModifiedDate", "checksum", "contentType", "userId", "contentLength", "versionId", "documents", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentId"]) -> MetaOapg.properties.documentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteId"]) -> typing.Union[MetaOapg.properties.siteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insertedDate"]) -> typing.Union[MetaOapg.properties.insertedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedDate"]) -> typing.Union[MetaOapg.properties.lastModifiedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checksum"]) -> typing.Union[MetaOapg.properties.checksum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentType"]) -> typing.Union[MetaOapg.properties.contentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentLength"]) -> typing.Union[MetaOapg.properties.contentLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionId"]) -> typing.Union[MetaOapg.properties.versionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documents"]) -> typing.Union[MetaOapg.properties.documents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["documentId", "siteId", "path", "insertedDate", "lastModifiedDate", "checksum", "contentType", "userId", "contentLength", "versionId", "documents", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        documentId: typing.Union[MetaOapg.properties.documentId, str, ],
        siteId: typing.Union[MetaOapg.properties.siteId, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        insertedDate: typing.Union[MetaOapg.properties.insertedDate, str, schemas.Unset] = schemas.unset,
        lastModifiedDate: typing.Union[MetaOapg.properties.lastModifiedDate, str, schemas.Unset] = schemas.unset,
        checksum: typing.Union[MetaOapg.properties.checksum, str, schemas.Unset] = schemas.unset,
        contentType: typing.Union[MetaOapg.properties.contentType, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        contentLength: typing.Union[MetaOapg.properties.contentLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        versionId: typing.Union[MetaOapg.properties.versionId, str, schemas.Unset] = schemas.unset,
        documents: typing.Union[MetaOapg.properties.documents, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetDocumentResponse':
        return super().__new__(
            cls,
            *_args,
            documentId=documentId,
            siteId=siteId,
            path=path,
            insertedDate=insertedDate,
            lastModifiedDate=lastModifiedDate,
            checksum=checksum,
            contentType=contentType,
            userId=userId,
            contentLength=contentLength,
            versionId=versionId,
            documents=documents,
            _configuration=_configuration,
            **kwargs,
        )

from formkiq_client.model.child_document import ChildDocument
