# coding: utf-8

"""
    FormKiQ API JWT

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.17.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from formkiq_client.models.ocr_engine import OcrEngine
from formkiq_client.models.ocr_output_type import OcrOutputType
from typing import Optional, Set
from typing_extensions import Self

class AddActionParameters(BaseModel):
    """
    AddActionParameters
    """ # noqa: E501
    ocr_parse_types: Optional[StrictStr] = Field(default=None, description="OCR: Parse types - TEXT, FORMS, TABLES", alias="ocrParseTypes")
    ocr_engine: Optional[OcrEngine] = Field(default=None, alias="ocrEngine")
    ocr_output_type: Optional[OcrOutputType] = Field(default=None, alias="ocrOutputType")
    ocr_number_of_pages: Optional[StrictStr] = Field(default=None, description="Number of pages to OCR (from start) (-1 all)", alias="ocrNumberOfPages")
    add_pdf_detected_characters_as_text: Optional[StrictStr] = Field(default=None, description="OCR: For the rewriting of the PDF document, converting any image text to searchable text", alias="addPdfDetectedCharactersAsText")
    url: Optional[StrictStr] = Field(default=None, description="Webhook: Callback URL")
    character_max: Optional[StrictStr] = Field(default=None, description="Fulltext: Maximum number of characters (-1 unlimited, Typesense defaults to 2048 characters)", alias="characterMax")
    engine: Optional[StrictStr] = Field(default=None, description="DocumentTagging: Engine to use for document tagging generation")
    notification_type: Optional[StrictStr] = Field(default=None, description="Notification Type", alias="notificationType")
    notification_to_cc: Optional[StrictStr] = Field(default=None, description="Who to carbon copy on the notification to (comma-delimited list)", alias="notificationToCc")
    notification_to_bcc: Optional[StrictStr] = Field(default=None, description="Who to blind carbon copy on the notification to (comma-delimited list)", alias="notificationToBcc")
    notification_subject: Optional[StrictStr] = Field(default=None, description="Subject of the notification", alias="notificationSubject")
    notification_text: Optional[StrictStr] = Field(default=None, description="Text of the notification", alias="notificationText")
    notification_html: Optional[StrictStr] = Field(default=None, description="Html of the notification", alias="notificationHtml")
    tags: Optional[StrictStr] = Field(default=None, description="DocumentTagging: Comma-deliminted list of keywords to generate tags for")
    mapping_id: Optional[StrictStr] = Field(default=None, description="Id of Mapping", alias="mappingId")
    event_bus_name: Optional[StrictStr] = Field(default=None, description="The name or ARN of the event bus to receive the event", alias="eventBusName")
    __properties: ClassVar[List[str]] = ["ocrParseTypes", "ocrEngine", "ocrOutputType", "ocrNumberOfPages", "addPdfDetectedCharactersAsText", "url", "characterMax", "engine", "notificationType", "notificationToCc", "notificationToBcc", "notificationSubject", "notificationText", "notificationHtml", "tags", "mappingId", "eventBusName"]

    @field_validator('engine')
    def engine_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['chatgpt']):
            raise ValueError("must be one of enum values ('chatgpt')")
        return value

    @field_validator('notification_type')
    def notification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['email']):
            raise ValueError("must be one of enum values ('email')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddActionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddActionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ocrParseTypes": obj.get("ocrParseTypes"),
            "ocrEngine": obj.get("ocrEngine"),
            "ocrOutputType": obj.get("ocrOutputType"),
            "ocrNumberOfPages": obj.get("ocrNumberOfPages"),
            "addPdfDetectedCharactersAsText": obj.get("addPdfDetectedCharactersAsText"),
            "url": obj.get("url"),
            "characterMax": obj.get("characterMax"),
            "engine": obj.get("engine"),
            "notificationType": obj.get("notificationType"),
            "notificationToCc": obj.get("notificationToCc"),
            "notificationToBcc": obj.get("notificationToBcc"),
            "notificationSubject": obj.get("notificationSubject"),
            "notificationText": obj.get("notificationText"),
            "notificationHtml": obj.get("notificationHtml"),
            "tags": obj.get("tags"),
            "mappingId": obj.get("mappingId"),
            "eventBusName": obj.get("eventBusName")
        })
        return _obj


