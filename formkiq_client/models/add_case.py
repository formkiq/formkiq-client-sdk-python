# coding: utf-8

"""
    FormKiQ API

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.14.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from formkiq_client.models.add_nigo import AddNigo
from formkiq_client.models.add_task import AddTask
from formkiq_client.models.case_status import CaseStatus
from formkiq_client.models.string_format import StringFormat
from typing import Optional, Set
from typing_extensions import Self

class AddCase(BaseModel):
    """
    AddCase
    """ # noqa: E501
    name: StrictStr = Field(description="Case Name")
    status: Optional[CaseStatus] = None
    start_date: Optional[StrictStr] = Field(default=None, description="Start Date", alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, description="End Date", alias="endDate")
    description: Optional[StrictStr] = Field(default=None, description="Case Description")
    document_number_format: Optional[List[StringFormat]] = Field(default=None, description="Format of Document Number", alias="documentNumberFormat")
    case_number_format: Optional[List[StringFormat]] = Field(default=None, description="Format of Case Number", alias="caseNumberFormat")
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    document_ids: Optional[List[StrictStr]] = Field(default=None, alias="documentIds")
    tasks: Optional[List[AddTask]] = None
    nigos: Optional[List[AddNigo]] = None
    __properties: ClassVar[List[str]] = ["name", "status", "startDate", "endDate", "description", "documentNumberFormat", "caseNumberFormat", "metadata", "documentIds", "tasks", "nigos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddCase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in document_number_format (list)
        _items = []
        if self.document_number_format:
            for _item in self.document_number_format:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documentNumberFormat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_number_format (list)
        _items = []
        if self.case_number_format:
            for _item in self.case_number_format:
                if _item:
                    _items.append(_item.to_dict())
            _dict['caseNumberFormat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item in self.tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nigos (list)
        _items = []
        if self.nigos:
            for _item in self.nigos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nigos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddCase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "status": obj.get("status"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "description": obj.get("description"),
            "documentNumberFormat": [StringFormat.from_dict(_item) for _item in obj["documentNumberFormat"]] if obj.get("documentNumberFormat") is not None else None,
            "caseNumberFormat": [StringFormat.from_dict(_item) for _item in obj["caseNumberFormat"]] if obj.get("caseNumberFormat") is not None else None,
            "metadata": obj.get("metadata"),
            "documentIds": obj.get("documentIds"),
            "tasks": [AddTask.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None,
            "nigos": [AddNigo.from_dict(_item) for _item in obj["nigos"]] if obj.get("nigos") is not None else None
        })
        return _obj


