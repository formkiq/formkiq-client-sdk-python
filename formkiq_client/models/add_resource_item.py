# coding: utf-8

"""
    FormKiQ API JWT

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.17.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from formkiq_client.models.add_locale_resource_classification_item import AddLocaleResourceClassificationItem
from formkiq_client.models.add_locale_resource_interface_item import AddLocaleResourceInterfaceItem
from formkiq_client.models.add_locale_resource_schema_item import AddLocaleResourceSchemaItem
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDRESOURCEITEM_ONE_OF_SCHEMAS = ["AddLocaleResourceClassificationItem", "AddLocaleResourceInterfaceItem", "AddLocaleResourceSchemaItem"]

class AddResourceItem(BaseModel):
    """
    AddResourceItem
    """
    # data type: AddLocaleResourceInterfaceItem
    oneof_schema_1_validator: Optional[AddLocaleResourceInterfaceItem] = None
    # data type: AddLocaleResourceSchemaItem
    oneof_schema_2_validator: Optional[AddLocaleResourceSchemaItem] = None
    # data type: AddLocaleResourceClassificationItem
    oneof_schema_3_validator: Optional[AddLocaleResourceClassificationItem] = None
    actual_instance: Optional[Union[AddLocaleResourceClassificationItem, AddLocaleResourceInterfaceItem, AddLocaleResourceSchemaItem]] = None
    one_of_schemas: Set[str] = { "AddLocaleResourceClassificationItem", "AddLocaleResourceInterfaceItem", "AddLocaleResourceSchemaItem" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddResourceItem.model_construct()
        error_messages = []
        match = 0
        # validate data type: AddLocaleResourceInterfaceItem
        if not isinstance(v, AddLocaleResourceInterfaceItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddLocaleResourceInterfaceItem`")
        else:
            match += 1
        # validate data type: AddLocaleResourceSchemaItem
        if not isinstance(v, AddLocaleResourceSchemaItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddLocaleResourceSchemaItem`")
        else:
            match += 1
        # validate data type: AddLocaleResourceClassificationItem
        if not isinstance(v, AddLocaleResourceClassificationItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddLocaleResourceClassificationItem`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddResourceItem with oneOf schemas: AddLocaleResourceClassificationItem, AddLocaleResourceInterfaceItem, AddLocaleResourceSchemaItem. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddResourceItem with oneOf schemas: AddLocaleResourceClassificationItem, AddLocaleResourceInterfaceItem, AddLocaleResourceSchemaItem. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AddLocaleResourceInterfaceItem
        try:
            instance.actual_instance = AddLocaleResourceInterfaceItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddLocaleResourceSchemaItem
        try:
            instance.actual_instance = AddLocaleResourceSchemaItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddLocaleResourceClassificationItem
        try:
            instance.actual_instance = AddLocaleResourceClassificationItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddResourceItem with oneOf schemas: AddLocaleResourceClassificationItem, AddLocaleResourceInterfaceItem, AddLocaleResourceSchemaItem. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddResourceItem with oneOf schemas: AddLocaleResourceClassificationItem, AddLocaleResourceInterfaceItem, AddLocaleResourceSchemaItem. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddLocaleResourceClassificationItem, AddLocaleResourceInterfaceItem, AddLocaleResourceSchemaItem]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


