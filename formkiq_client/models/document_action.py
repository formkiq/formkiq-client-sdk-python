# coding: utf-8

"""
    FormKiQ API JWT

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.16.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from formkiq_client.models.document_action_status import DocumentActionStatus
from formkiq_client.models.document_action_type import DocumentActionType
from typing import Optional, Set
from typing_extensions import Self

class DocumentAction(BaseModel):
    """
    DocumentAction
    """ # noqa: E501
    status: Optional[DocumentActionStatus] = None
    type: Optional[DocumentActionType] = None
    queue_id: Optional[StrictStr] = Field(default=None, description="Queue Id", alias="queueId")
    workflow_id: Optional[StrictStr] = Field(default=None, description="Workflow Id", alias="workflowId")
    workflow_step_id: Optional[StrictStr] = Field(default=None, description="Workflow Step Id", alias="workflowStepId")
    message: Optional[StrictStr] = Field(default=None, description="Action message information")
    user_id: Optional[StrictStr] = Field(default=None, description="User who requested the Action", alias="userId")
    inserted_date: Optional[StrictStr] = Field(default=None, description="Inserted Timestamp", alias="insertedDate")
    start_date: Optional[StrictStr] = Field(default=None, description="Started Timestamp", alias="startDate")
    completed_date: Optional[StrictStr] = Field(default=None, description="Completed Timestamp", alias="completedDate")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Action parameters")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Action metadata")
    __properties: ClassVar[List[str]] = ["status", "type", "queueId", "workflowId", "workflowStepId", "message", "userId", "insertedDate", "startDate", "completedDate", "parameters", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "type": obj.get("type"),
            "queueId": obj.get("queueId"),
            "workflowId": obj.get("workflowId"),
            "workflowStepId": obj.get("workflowStepId"),
            "message": obj.get("message"),
            "userId": obj.get("userId"),
            "insertedDate": obj.get("insertedDate"),
            "startDate": obj.get("startDate"),
            "completedDate": obj.get("completedDate"),
            "parameters": obj.get("parameters"),
            "metadata": obj.get("metadata")
        })
        return _obj


