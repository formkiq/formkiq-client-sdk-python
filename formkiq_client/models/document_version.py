# coding: utf-8

"""
    FormKiQ HTTP API

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.13.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DocumentVersion(BaseModel):
    """
    DocumentVersion
    """ # noqa: E501
    path: Optional[StrictStr] = Field(default=None, description="Path or Name of document")
    deep_link_path: Optional[StrictStr] = Field(default=None, description="Path or Name of deep link", alias="deepLinkPath")
    inserted_date: Optional[StrictStr] = Field(default=None, description="Inserted Timestamp", alias="insertedDate")
    last_modified_date: Optional[StrictStr] = Field(default=None, description="Last Modified Timestamp", alias="lastModifiedDate")
    checksum: Optional[StrictStr] = Field(default=None, description="Document checksum, changes when document file changes")
    document_id: Optional[StrictStr] = Field(default=None, description="Document Identifier", alias="documentId")
    content_type: Optional[StrictStr] = Field(default=None, description="Document Content-Type", alias="contentType")
    user_id: Optional[StrictStr] = Field(default=None, description="User who added document", alias="userId")
    content_length: Optional[StrictInt] = Field(default=None, description="Document size", alias="contentLength")
    version: Optional[StrictStr] = Field(default=None, description="Document version")
    version_key: Optional[StrictStr] = Field(default=None, description="Document Version Identifier", alias="versionKey")
    s3version: Optional[StrictStr] = Field(default=None, description="Document storage version")
    __properties: ClassVar[List[str]] = ["path", "deepLinkPath", "insertedDate", "lastModifiedDate", "checksum", "documentId", "contentType", "userId", "contentLength", "version", "versionKey", "s3version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DocumentVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DocumentVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "path": obj.get("path"),
            "deepLinkPath": obj.get("deepLinkPath"),
            "insertedDate": obj.get("insertedDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "checksum": obj.get("checksum"),
            "documentId": obj.get("documentId"),
            "contentType": obj.get("contentType"),
            "userId": obj.get("userId"),
            "contentLength": obj.get("contentLength"),
            "version": obj.get("version"),
            "versionKey": obj.get("versionKey"),
            "s3version": obj.get("s3version")
        })
        return _obj


