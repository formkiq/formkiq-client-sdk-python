# coding: utf-8

"""
    FormKiQ API JWT

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.17.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from formkiq_client.models.docusign_config import DocusignConfig
from formkiq_client.models.google_config import GoogleConfig
from formkiq_client.models.ocr_config import OcrConfig
from typing import Optional, Set
from typing_extensions import Self

class GetConfigurationResponse(BaseModel):
    """
    GetConfigurationResponse
    """ # noqa: E501
    chat_gpt_api_key: Optional[StrictStr] = Field(default=None, description="ChatGPT API Key", alias="chatGptApiKey")
    max_content_length_bytes: Optional[StrictStr] = Field(default=None, description="Set Maximum Document Content Length in Bytes", alias="maxContentLengthBytes")
    max_documents: Optional[StrictStr] = Field(default=None, description="Set Maximum number of Documents allowed", alias="maxDocuments")
    max_webhooks: Optional[StrictStr] = Field(default=None, description="Set Maximum number of Webhooks allowed", alias="maxWebhooks")
    notification_email: Optional[StrictStr] = Field(default=None, description="Email address to use for notifications (Must be verified identity created in AWS SES)", alias="notificationEmail")
    ocr: Optional[OcrConfig] = None
    google: Optional[GoogleConfig] = None
    docusign: Optional[DocusignConfig] = None
    __properties: ClassVar[List[str]] = ["chatGptApiKey", "maxContentLengthBytes", "maxDocuments", "maxWebhooks", "notificationEmail", "ocr", "google", "docusign"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetConfigurationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ocr
        if self.ocr:
            _dict['ocr'] = self.ocr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google
        if self.google:
            _dict['google'] = self.google.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docusign
        if self.docusign:
            _dict['docusign'] = self.docusign.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetConfigurationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chatGptApiKey": obj.get("chatGptApiKey"),
            "maxContentLengthBytes": obj.get("maxContentLengthBytes"),
            "maxDocuments": obj.get("maxDocuments"),
            "maxWebhooks": obj.get("maxWebhooks"),
            "notificationEmail": obj.get("notificationEmail"),
            "ocr": OcrConfig.from_dict(obj["ocr"]) if obj.get("ocr") is not None else None,
            "google": GoogleConfig.from_dict(obj["google"]) if obj.get("google") is not None else None,
            "docusign": DocusignConfig.from_dict(obj["docusign"]) if obj.get("docusign") is not None else None
        })
        return _obj


