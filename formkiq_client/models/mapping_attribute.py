# coding: utf-8

"""
    FormKiQ API JWT

    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication  You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).  ## Introduction  FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.  FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.  Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml  Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml  ## Authentication FormKiQ offers three forms of authentication:   - OAuth(JWT)   - AWS IAM   - API Key

    The version of the OpenAPI document: 1.17.0
    Contact: support@formkiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from formkiq_client.models.mapping_attribute_label_matching_type import MappingAttributeLabelMatchingType
from formkiq_client.models.mapping_attribute_metadata_field import MappingAttributeMetadataField
from formkiq_client.models.mapping_attribute_source_type import MappingAttributeSourceType
from typing import Optional, Set
from typing_extensions import Self

class MappingAttribute(BaseModel):
    """
    MappingAttribute
    """ # noqa: E501
    attribute_key: Optional[StrictStr] = Field(default=None, description="Attribute Key", alias="attributeKey")
    source_type: Optional[MappingAttributeSourceType] = Field(default=None, alias="sourceType")
    default_value: Optional[StrictStr] = Field(default=None, description="Default value", alias="defaultValue")
    default_values: Optional[List[StrictStr]] = Field(default=None, description="Default values", alias="defaultValues")
    label_texts: Optional[List[StrictStr]] = Field(default=None, alias="labelTexts")
    label_matching_type: Optional[MappingAttributeLabelMatchingType] = Field(default=None, alias="labelMatchingType")
    metadata_field: Optional[MappingAttributeMetadataField] = Field(default=None, alias="metadataField")
    validation_regex: Optional[StrictStr] = Field(default=None, description="Attribute Value Regex Validation", alias="validationRegex")
    __properties: ClassVar[List[str]] = ["attributeKey", "sourceType", "defaultValue", "defaultValues", "labelTexts", "labelMatchingType", "metadataField", "validationRegex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MappingAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MappingAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeKey": obj.get("attributeKey"),
            "sourceType": obj.get("sourceType"),
            "defaultValue": obj.get("defaultValue"),
            "defaultValues": obj.get("defaultValues"),
            "labelTexts": obj.get("labelTexts"),
            "labelMatchingType": obj.get("labelMatchingType"),
            "metadataField": obj.get("metadataField"),
            "validationRegex": obj.get("validationRegex")
        })
        return _obj


